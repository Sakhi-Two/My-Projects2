//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BBTapes1.MyServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceReference.BBTapesService")]
    public interface BBTapesService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/Register", ReplyAction="http://tempuri.org/BBTapesService/RegisterResponse")]
        int Register(BBTapeService.UsersInfo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/Register", ReplyAction="http://tempuri.org/BBTapesService/RegisterResponse")]
        System.Threading.Tasks.Task<int> RegisterAsync(BBTapeService.UsersInfo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/Registered", ReplyAction="http://tempuri.org/BBTapesService/RegisteredResponse")]
        bool Registered(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/Registered", ReplyAction="http://tempuri.org/BBTapesService/RegisteredResponse")]
        System.Threading.Tasks.Task<bool> RegisteredAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/Login", ReplyAction="http://tempuri.org/BBTapesService/LoginResponse")]
        int Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/Login", ReplyAction="http://tempuri.org/BBTapesService/LoginResponse")]
        System.Threading.Tasks.Task<int> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/EditAlbum", ReplyAction="http://tempuri.org/BBTapesService/EditAlbumResponse")]
        bool EditAlbum(BBTapeService.AlbumInfo album, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/EditAlbum", ReplyAction="http://tempuri.org/BBTapesService/EditAlbumResponse")]
        System.Threading.Tasks.Task<bool> EditAlbumAsync(BBTapeService.AlbumInfo album, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/AddAlbum", ReplyAction="http://tempuri.org/BBTapesService/AddAlbumResponse")]
        bool AddAlbum(BBTapeService.AlbumInfo album);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/AddAlbum", ReplyAction="http://tempuri.org/BBTapesService/AddAlbumResponse")]
        System.Threading.Tasks.Task<bool> AddAlbumAsync(BBTapeService.AlbumInfo album);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/GetAlbum", ReplyAction="http://tempuri.org/BBTapesService/GetAlbumResponse")]
        BBTapeService.AlbumInfo GetAlbum(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/GetAlbum", ReplyAction="http://tempuri.org/BBTapesService/GetAlbumResponse")]
        System.Threading.Tasks.Task<BBTapeService.AlbumInfo> GetAlbumAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getUsers", ReplyAction="http://tempuri.org/BBTapesService/getUsersResponse")]
        BBTapeService.UsersInfo getUsers(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getUsers", ReplyAction="http://tempuri.org/BBTapesService/getUsersResponse")]
        System.Threading.Tasks.Task<BBTapeService.UsersInfo> getUsersAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/isAlbum", ReplyAction="http://tempuri.org/BBTapesService/isAlbumResponse")]
        bool isAlbum(string albumName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/isAlbum", ReplyAction="http://tempuri.org/BBTapesService/isAlbumResponse")]
        System.Threading.Tasks.Task<bool> isAlbumAsync(string albumName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getArtists", ReplyAction="http://tempuri.org/BBTapesService/getArtistsResponse")]
        BBTapeService.ArtistInfo[] getArtists(int ArtistType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getArtists", ReplyAction="http://tempuri.org/BBTapesService/getArtistsResponse")]
        System.Threading.Tasks.Task<BBTapeService.ArtistInfo[]> getArtistsAsync(int ArtistType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/GetArtistAlbum", ReplyAction="http://tempuri.org/BBTapesService/GetArtistAlbumResponse")]
        BBTapeService.AlbumInfo[] GetArtistAlbum(int ArtistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/GetArtistAlbum", ReplyAction="http://tempuri.org/BBTapesService/GetArtistAlbumResponse")]
        System.Threading.Tasks.Task<BBTapeService.AlbumInfo[]> GetArtistAlbumAsync(int ArtistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/AddToCart", ReplyAction="http://tempuri.org/BBTapesService/AddToCartResponse")]
        bool AddToCart(BBTapeService.CartInfo cart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/AddToCart", ReplyAction="http://tempuri.org/BBTapesService/AddToCartResponse")]
        System.Threading.Tasks.Task<bool> AddToCartAsync(BBTapeService.CartInfo cart);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getArtistName", ReplyAction="http://tempuri.org/BBTapesService/getArtistNameResponse")]
        string getArtistName(int ArtistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getArtistName", ReplyAction="http://tempuri.org/BBTapesService/getArtistNameResponse")]
        System.Threading.Tasks.Task<string> getArtistNameAsync(int ArtistID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getCartItems", ReplyAction="http://tempuri.org/BBTapesService/getCartItemsResponse")]
        int[] getCartItems(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/getCartItems", ReplyAction="http://tempuri.org/BBTapesService/getCartItemsResponse")]
        System.Threading.Tasks.Task<int[]> getCartItemsAsync(int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/NewAlbum", ReplyAction="http://tempuri.org/BBTapesService/NewAlbumResponse")]
        bool NewAlbum(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/NewAlbum", ReplyAction="http://tempuri.org/BBTapesService/NewAlbumResponse")]
        System.Threading.Tasks.Task<bool> NewAlbumAsync(string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/SearchAlbum", ReplyAction="http://tempuri.org/BBTapesService/SearchAlbumResponse")]
        bool SearchAlbum(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/SearchAlbum", ReplyAction="http://tempuri.org/BBTapesService/SearchAlbumResponse")]
        System.Threading.Tasks.Task<bool> SearchAlbumAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/DeleteAlbum", ReplyAction="http://tempuri.org/BBTapesService/DeleteAlbumResponse")]
        bool DeleteAlbum(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/BBTapesService/DeleteAlbum", ReplyAction="http://tempuri.org/BBTapesService/DeleteAlbumResponse")]
        System.Threading.Tasks.Task<bool> DeleteAlbumAsync(int ID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface BBTapesServiceChannel : BBTapes1.MyServiceReference.BBTapesService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BBTapesServiceClient : System.ServiceModel.ClientBase<BBTapes1.MyServiceReference.BBTapesService>, BBTapes1.MyServiceReference.BBTapesService {
        
        public BBTapesServiceClient() {
        }
        
        public BBTapesServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BBTapesServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BBTapesServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BBTapesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int Register(BBTapeService.UsersInfo user) {
            return base.Channel.Register(user);
        }
        
        public System.Threading.Tasks.Task<int> RegisterAsync(BBTapeService.UsersInfo user) {
            return base.Channel.RegisterAsync(user);
        }
        
        public bool Registered(string username, string password) {
            return base.Channel.Registered(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> RegisteredAsync(string username, string password) {
            return base.Channel.RegisteredAsync(username, password);
        }
        
        public int Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<int> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public bool EditAlbum(BBTapeService.AlbumInfo album, int ID) {
            return base.Channel.EditAlbum(album, ID);
        }
        
        public System.Threading.Tasks.Task<bool> EditAlbumAsync(BBTapeService.AlbumInfo album, int ID) {
            return base.Channel.EditAlbumAsync(album, ID);
        }
        
        public bool AddAlbum(BBTapeService.AlbumInfo album) {
            return base.Channel.AddAlbum(album);
        }
        
        public System.Threading.Tasks.Task<bool> AddAlbumAsync(BBTapeService.AlbumInfo album) {
            return base.Channel.AddAlbumAsync(album);
        }
        
        public BBTapeService.AlbumInfo GetAlbum(int ID) {
            return base.Channel.GetAlbum(ID);
        }
        
        public System.Threading.Tasks.Task<BBTapeService.AlbumInfo> GetAlbumAsync(int ID) {
            return base.Channel.GetAlbumAsync(ID);
        }
        
        public BBTapeService.UsersInfo getUsers(string username) {
            return base.Channel.getUsers(username);
        }
        
        public System.Threading.Tasks.Task<BBTapeService.UsersInfo> getUsersAsync(string username) {
            return base.Channel.getUsersAsync(username);
        }
        
        public bool isAlbum(string albumName) {
            return base.Channel.isAlbum(albumName);
        }
        
        public System.Threading.Tasks.Task<bool> isAlbumAsync(string albumName) {
            return base.Channel.isAlbumAsync(albumName);
        }
        
        public BBTapeService.ArtistInfo[] getArtists(int ArtistType) {
            return base.Channel.getArtists(ArtistType);
        }
        
        public System.Threading.Tasks.Task<BBTapeService.ArtistInfo[]> getArtistsAsync(int ArtistType) {
            return base.Channel.getArtistsAsync(ArtistType);
        }
        
        public BBTapeService.AlbumInfo[] GetArtistAlbum(int ArtistID) {
            return base.Channel.GetArtistAlbum(ArtistID);
        }
        
        public System.Threading.Tasks.Task<BBTapeService.AlbumInfo[]> GetArtistAlbumAsync(int ArtistID) {
            return base.Channel.GetArtistAlbumAsync(ArtistID);
        }
        
        public bool AddToCart(BBTapeService.CartInfo cart) {
            return base.Channel.AddToCart(cart);
        }
        
        public System.Threading.Tasks.Task<bool> AddToCartAsync(BBTapeService.CartInfo cart) {
            return base.Channel.AddToCartAsync(cart);
        }
        
        public string getArtistName(int ArtistID) {
            return base.Channel.getArtistName(ArtistID);
        }
        
        public System.Threading.Tasks.Task<string> getArtistNameAsync(int ArtistID) {
            return base.Channel.getArtistNameAsync(ArtistID);
        }
        
        public int[] getCartItems(int userID) {
            return base.Channel.getCartItems(userID);
        }
        
        public System.Threading.Tasks.Task<int[]> getCartItemsAsync(int userID) {
            return base.Channel.getCartItemsAsync(userID);
        }
        
        public bool NewAlbum(string Name) {
            return base.Channel.NewAlbum(Name);
        }
        
        public System.Threading.Tasks.Task<bool> NewAlbumAsync(string Name) {
            return base.Channel.NewAlbumAsync(Name);
        }
        
        public bool SearchAlbum(int ID) {
            return base.Channel.SearchAlbum(ID);
        }
        
        public System.Threading.Tasks.Task<bool> SearchAlbumAsync(int ID) {
            return base.Channel.SearchAlbumAsync(ID);
        }
        
        public bool DeleteAlbum(int ID) {
            return base.Channel.DeleteAlbum(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAlbumAsync(int ID) {
            return base.Channel.DeleteAlbumAsync(ID);
        }
    }
}
